# -*- coding: utf-8 -*-
"""programa_espessura.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hYL_oxPuaG8_Xm8JiNXCZ_qfxdDYIMUW
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy.optimize
import streamlit as st

info = {
    "1":{"amostra":"SiO2/Si", "R_inf":0.65, "imfp": 3.75},
    "2":{"amostra":"Al2O3/Si", "R_inf":0.39394 , "imfp": 2.681},
    "3":{"amostra":"HfO2/Si", "R_inf":0.389369, "imfp": 2.08}
}

def f1 (x,a,b):
  return a*x + b

st.title("Estimativa da espessura de filmes finos por ARXPS")

st.text("""Use arquivos de texto com as áreas (ou áreas relativas) entre 
os picos de interesse para cada ângulo medido, de maneira parecida a:
        
Sample Identifier	Hf 4f %	  Si 2p %	
Al Kalpha (2)	      81.8966	  18.1034	
Al Kalpha (3)	      84.1956	  15.8044	
Al Kalpha (3)	      86.4541	  13.5459	
Al Kalpha (3)	      90.3613	  9.63866	
Al Kalpha (3)	      92.2507	  7.74929	
Al Kalpha (3)	      93.5935	  6.4065	
Al Kalpha (3)	      94.9992	  5.00077	
Al Kalpha (3)	      95.4103   4.58966	       
""")

arquivo = st.file_uploader("Escolha o arquivo")

data = pd.read_csv(arquivo, sep='\t')

st.write(data)

filme = st.radio("Qual coluna possui os dados do filme?", list(data.columns))
substrato = st.radio("Qual coluna possui os dados do substrato?", list(data.columns))

topo = np.array(data[filme])
base = np.array(data[substrato])
#print(topo,base)

st.write(pd.DataFrame(info))

sel = st.radio(
    "Selecione o número da amostra(1,2,3,...): ",
    ["1","2" ,"3" ],
    captions=[
        f' {info["1"]["amostra"]}',
        f' {info["2"]["amostra"]}',
        f' {info["3"]["amostra"]}',
    ],
)

R_inf = info[sel]['R_inf']
imfp = info[sel]['imfp']

size = len(topo)
ang = np.zeros(size)
for i in range(size):
  ang[i] = float(st.number_input(f"Ângulo {i+1}:", value=None, placeholder="Ângulo em graus",step=0.1,format="%0.1f")) 
  st.write(f"Ângulo {i+1} = {ang[i]}°")

ang = ang * np.pi / 180



R = topo/base
x = 1/(imfp*np.cos(ang))
y = np.log(1 + R/R_inf)


ini = st.slider("Primeiro ponto a ser considerado",1,size,1) -1
fin = st.slider("Último ponto a ser considerado",ini+2,size,size)

print("Serão usados os pontos: ", end="")
for i in range(ini,fin):
  print(i+1," " ,end="")


res, cov = scipy.optimize.curve_fit(f1,x[ini:fin],y[ini:fin])


fig2,ax2 = plt.subplots()
ax2.scatter(x,y,10,'k','d',label='Pontos experimentais' )
for i in range(size):
  plt.annotate(f"{i+1}",(x[i],y[i]),textcoords="offset points",xytext=(0,10),ha='center')
ax2.plot(x[ini:fin],x[ini:fin]*res[0]+res[1],c='r', label=f'''Regressão linear
y = {res[0]:.3f}*x + {res[1]:.3f}''')  
plt.legend()
st.pyplot(fig2)

st.write(f'A regressão linear ficou y = {res[0]:.3f}*x + {res[1]:.3f}')
st.write(f'A espessura estimada é {res[0]:.3f}nm')